version: '3.3'

services:
    mongo-container:
        container_name: mongo-db
        networks:
            clusternetwork:
                ipv4_address: 172.16.0.13
        image: mongo:latest
        ports:
            - "27017:27017"
        environment:
            - MONGO_INITDB_ROOT_USERNAME=root
            - MONGO_INITDB_ROOT_PASSWORD=mongo-db
            - MONGO_INITDB_DATABASE=chatApp
        volumes:
            - "$PWD/mongodb/mongo-entrypoint/:/docker-entrypoint-initdb.d/"
    mysql-container:
        container_name: mysql-db
        networks:
            clusternetwork:
                ipv4_address: 172.16.0.10
        image: mysql:5.7
        ports:
            - "3306:3306"
        environment:
            - MYSQL_ROOT_PASSWORD=mysql-db
            - MYSQL_USER=user
            - MYSQL_PASSWORD=mysql-db
            - MYSQL_DATABASE=chatApp
            - TZ=Asia/Seoul
        command:
            - --default-authentication-plugin=mysql_native_password
            - --character-set-server=utf8mb4
            - --collation-server=utf8mb4_unicode_ci
        volumes:
            - "$PWD/mysql:/var/lib/mysql"
    reactjs:
        container_name: reactjs
        build:
            context: ./reactjs
            dockerfile: Dockerfile
            args:
                buildno: 1
        networks:
            clusternetwork:
                ipv4_address: 172.16.0.15
        ports:
            - "8889:8889"
        image: charbori/reactjs_dev:1.0
        links:
            - mongo-container
            - mysql-container
        volumes:
            - "$PWD/reactjs:/app"
    nodejs:
        build:
            context: ./nodejs
            dockerfile: Dockerfile
            args:
                buildno: 1
        container_name: nodejs
        networks:
            clusternetwork:
                ipv4_address: 172.16.0.14
        ports:
            - "443:443"
            - "1337:1337"
            - "8888:8888"
        image: charbori/nodejs_dev:1.0
        links:
            - mongo-container
            - mysql-container
        depends_on:
            - mongo-container
            - mysql-container
            - reactjs
        environment:
            ME_CONFIG_MONGODB_ADMINUSERNAME: root
            ME_CONFIG_MONGODB_ADMINPASSWORD: mongo-db
        volumes:
            - "$PWD/nodejs/app:/app"
            - "$PWD/nodejs/mysql:/var/lib/mysql"
    nginx:
        build:
            context: ./nginx
            dockerfile: Dockerfile
            args:
                buildno: 1
        container_name: nginx
        networks:
            clusternetwork:
                ipv4_address: 172.16.0.16
        image: charbori/nginx_dev:1.0
        ports: 
            - "80:80"
            - "1338:1338"
            - "33333:33333"
        depends_on:
            - mongo-container
            - mysql-container
            - reactjs
            - nodejs
networks:
    clusternetwork:
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: 172.16.0.0/24
              #networks:
              #default:
              #external:
              #name: demo-network
